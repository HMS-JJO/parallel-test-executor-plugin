@Library('testInParallel') _

stage('Sources') {
  node {
    checkout scm
    stash name: 'sources', excludes: 'Jenkinsfile'
  }
}

stage('Testing') {
  testInParallel(count(5), 'TESTCASENAME', 'inclusions.txt', 'exclusions.txt', 'out.xml', 'nielsdenissen/docker-python-ci', {
    unstash 'sources'
  }, {
    configFileProvider([configFile(fileId: 'jenkins-mirror', variable: 'SETTINGS')]) {
        try { 
            def result = ""
            def e = readFile 'exclusions.txt'
            def i = readFile 'inclusions.txt'
        
            if (e) { // use exclusions
                e = e.replaceAll("\n", " or ")
                result = "not(${e})"
            } else if (i) {
                i = i.replaceAll("\n", " or ")
                result = i
            }

            sh "pytest --junit-xml=out.xml -k \'${result}\'"
        } catch (err) {
            echo "Pytest failed, could be failed test cases. JUnit will collect result."
        }
    }
  })
}
